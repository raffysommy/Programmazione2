package coda;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class CodaSyncronized implements Coda {
	private int[] elements;
	private int testa;
	private int coda;
	private int dimensione;
	private final Lock lock;
	private final Condition fullqueue;
	private final Condition emptyqueue;
	@Override
	public int pop() {
		
		lock.lock();
		Integer element=null;
		try {
			while(this.isempty())
				emptyqueue.await();
			element=elements[testa];
			testa=(testa+1)%dimensione;
			fullqueue.signal();
		} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
		}
		finally{
				lock.unlock();
		}
		return element;
		
	}

	@Override
	public void push(int object) {
		lock.lock();
		try {
		while(this.isfull())			
				fullqueue.await();
		elements[coda]=object;
		coda=(coda+1)%dimensione;
		emptyqueue.signal();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			lock.unlock();
		}
	}	

	@Override
	public boolean isempty() {
		return testa==coda;
	}

	@Override
	public boolean isfull() {
		return (Math.abs(testa-coda)==dimensione);
	}

	@Override
	public int lenght() {
		lock.lock();
		int len=(Math.abs(testa-coda));
		lock.unlock();
		return (len);
	}

	public CodaSyncronized(int dimensione) {
		this.lock=new ReentrantLock();
		elements=new int[dimensione];
		emptyqueue=lock.newCondition();
		fullqueue=lock.newCondition();
		this.testa = 0;
		this.coda = 0;
		this.dimensione = dimensione;
	}


}
