package coda;

import java.util.concurrent.locks.ReentrantLock;

public class CodaSyncronized<T> implements Coda<T> {
	private T[] elements;
	private int testa;
	private int coda;
	private int dimensione;
	private ReentrantLock lock;
	@Override
	public T pop() {
		lock.lock();
		T element=elements[testa];
		testa=(testa+1)%dimensione;
		lock.unlock();
		return element;
	}

	@Override
	public void push(T object) {
		lock.lock();
		elements[coda]=object;
		coda=(coda+1)%dimensione;
		lock.unlock();
	}

	@Override
	public boolean isempty() {
		lock.lock();
		boolean condition=testa==coda;
		lock.lock();
		return (condition);
	}

	@Override
	public boolean isfull() {
		lock.lock();
		boolean condition=(Math.abs(testa-coda)==dimensione);
		lock.lock();
		return (condition);
	}

	@Override
	public int lenght() {
		lock.lock();
		int len=(Math.abs(testa-coda));
		lock.lock();
		return (len);
	}

	public CodaSyncronized(int dimensione) {
		this.lock=new ReentrantLock();
		this.testa = 0;
		this.coda = 0;
		this.dimensione = dimensione;
	}


}
